name: Build and deploy webserver

on:
  push:
    paths:
      - "website/**"
      - "build/webserver/**"
      - "deployments/**"
      - ".github/workflows/webserver*.yml"

jobs:
  build-docker-image:
    if: github.ref == 'refs/heads/master' && (${{ github.actor != 'github-actions[bot]' && github.event_name != 'push' || github.event.pusher.name != 'github-actions[bot]' }})
    permissions:
      contents: write
    uses: ./.github/workflows/webserver-build-and-push-docker-image.yml
    secrets:
      dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
      webserver-host: ${{ secrets.EC2_DEPLOY_HOST }}
  collect-services-versions:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'github-actions[bot]' && github.event_name != 'push' || github.event.pusher.name != 'github-actions[bot]' }}
    needs: [build-docker-image]
    outputs:
      user-service-tag: ${{ steps.user-service.outputs.tag }}
      webserver-tag: ${{ steps.webserver.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract user service tag
        id: user-service
        run: echo "tag=$(cat ./build/users/version.txt)" >> $GITHUB_OUTPUT
      - name: Extract webserver tag
        id: webserver
        run: echo "tag=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT
  deploy:
    if: github.ref == 'refs/heads/master' && (${{ github.actor != 'github-actions[bot]' && github.event_name != 'push' || github.event.pusher.name != 'github-actions[bot]' }})
    needs: [collect-services-versions]
    permissions:
      contents: write
    uses: ./.github/workflows/deploy-services.yml
    with:
      user-service-tag: ${{ needs.collect-services-versions.outputs.user-service-tag }}
      webserver-tag: ${{ needs.collect-services-versions.outputs.webserver-tag }}
    secrets:
      deploy-ssh-key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
      deploy-ssh-known-hosts: ${{ secrets.EC2_DEPLOY_SSH_KNOWN_HOSTS }}
      deploy-host: ${{ secrets.EC2_DEPLOY_HOST }}
      database-password: ${{ secrets.DATABASE_MANAGER_PASSWORD }}

name: Deploy

on:
  push:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-including-paths
    paths:
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'build/**'
      - '.github/**'

env:
  EC2_HOST: "35.180.67.147"
  DATABASE_PORT: 5432
  SERVER_PORT: 80
  RETRIES_COUNT: 5

jobs:
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
  tests:
    uses: ./.github/workflows/tests.yml
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}
  build-docker-image:
    uses: ./.github/workflows/push-docker-image.yml
    secrets:
      dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
  deploy:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    needs: [tests, build-docker-image]
    # https://medium.com/ryanjang-devnotes/ci-cd-hands-on-github-actions-docker-hub-aws-ec2-ba09f80297e1
    steps:
      - name: Extract commit hash
        run: echo "GIT_COMMIT_HASH=$(echo "${{ github.event.workflow_run.head_sha }}" | cut -c1-7)" >> "$GITHUB_ENV"
      - name: Inject database password
        run: echo "ENV_DATABASE_PASSWORD=${{ secrets.DATABASE_MANAGER_PASSWORD }}" >> "$GITHUB_ENV"
      - name: Update running docker instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          # https://github.com/appleboy/ssh-action
          host: "${{ env.EC2_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.EC2_DEPLOY_SSH_KEY_PASSPHRASE }}
          # For docker stop and rm steps:
          # https://stackoverflow.com/questions/69943233/print-only-names-column-from-docker-container-ls-la-output
          # https://stackoverflow.com/questions/74800773/how-to-avoid-getting-an-error-message-when-there-is-no-docker-container-image-vo
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker pull totocorpsoftwareinc/user-service:${{ env.GIT_COMMIT_HASH }}
            sudo docker container ls -la --format "{{.Names}}" | grep user-service | xargs --no-run-if-empty sudo docker stop user-service
            sudo docker container ls -la --format "{{.Names}}" | grep user-service | xargs --no-run-if-empty sudo docker rm user-service
            sudo docker run \
              -p ${{ env.DATABASE_PORT}} \
              -p ${{ env.SERVER_PORT}}:${{ env.SERVER_PORT}} \
              -e ENV_DATABASE_PASSWORD='${{ env.ENV_DATABASE_PASSWORD }}' \
              --name user-service \
              -d \
              --restart on-failure:${{ env.RETRIES_COUNT}} \
              totocorpsoftwareinc/user-service:${{ env.GIT_COMMIT_HASH }}

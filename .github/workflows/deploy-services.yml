name: Deploy services

on:
  push:
    paths:
      - "build/user-service/version.txt"
      - "build/user-dashboard/version.txt"
      - "build/stellar-dominion/version.txt"
      - "build/stellar-dominion-service/version.txt"
      - "deployments/**"
      - ".github/workflows/deploy-services.yml"
    branches: [master]
  # https://stackoverflow.com/questions/62750603/github-actions-trigger-another-action-after-one-action-is-completed
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run
  workflow_run:
    workflows:
      [
        "user-service",
        "Build and push user-dashboard docker image",
        "Build and push stellar-dominion docker image",
        "stellar-dominion-service",
      ]
    types:
      - completed
    branches: [master]

# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-concurrency-groups
concurrency:
  group: master-deployment
  cancel-in-progress: true

jobs:
  determine-execution-status:
    runs-on: ubuntu-latest
    outputs:
      should-execute: ${{ steps.execution-status.outputs.should_run }}
    steps:
      - name: Determine execution status
        id: execution-status
        # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-a-workflow-based-on-the-conclusion-of-another-workflow
        if: ${{ github.ref == 'refs/heads/master' && ((github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || (github.event_name == 'push')) }}
        run: echo 'should_run=success' >> $GITHUB_OUTPUT
  collect-services-versions:
    runs-on: ubuntu-latest
    needs: [determine-execution-status]
    if: ${{ needs.determine-execution-status.outputs.should-execute }}
    outputs:
      user-service-tag: ${{ steps.user-service.outputs.tag }}
      stellar-dominion-service-tag: ${{ steps.stellar-dominion-service.outputs.tag }}
      user-dashboard-tag: ${{ steps.user-dashboard.outputs.tag }}
      stellar-dominion-tag: ${{ steps.stellar-dominion.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract user service tag
        id: user-service
        run: echo "tag=$(cat ./build/user-service/version.txt)" >> $GITHUB_OUTPUT
      - name: Extract stellar dominion service tag
        id: stellar-dominion-service
        run: echo "tag=$(cat ./build/stellar-dominion-service/version.txt)" >> $GITHUB_OUTPUT
      - name: Extract user dashboard tag
        id: user-dashboard
        run: echo "tag=$(cat ./build/user-dashboard/version.txt)" >> $GITHUB_OUTPUT
      - name: Extract stellar-dominion tag
        id: stellar-dominion
        run: echo "tag=$(cat ./build/stellar-dominion/version.txt)" >> $GITHUB_OUTPUT
  backup-deployment-config:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    needs: [determine-execution-status, collect-services-versions]
    if: ${{ needs.determine-execution-status.outputs.should-execute }}
    steps:
      - name: Back-up deployment config
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            rm -rf ~/deployments.bak
            cp -r ~/deployments ~/deployments.bak
  sync-deployment-configuration:
    runs-on: ubuntu-latest
    needs:
      [
        determine-execution-status,
        backup-deployment-config,
        collect-services-versions,
      ]
    if: ${{ needs.determine-execution-status.outputs.should-execute }}
    steps:
      - uses: actions/checkout@v4
      - name: Substitute acme email
        run: |
          mv deployments/traefik-template.yml deployments/traefik.yml
          sed -i 's/${EMAIL_TO_BE_REPLACED}/${{ secrets.ACME_EMAIL }}/g' deployments/traefik.yml
      - name: Configure docker-compose deployment
        # https://deploy-preview-13474--docsdocker.netlify.app/compose/env-file/#compose-2x
        run: |
          echo "USER_SERVICE_TAG=${{ needs.collect-services-versions.outputs.user-service-tag }}" >> ./deployments/.env
          echo "ENV_USER_DATABASE_PASSWORD=${{ secrets.USER_DATABASE_MANAGER_PASSWORD }}" >> ./deployments/.env
          echo "STELLAR_DOMINION_SERVICE_TAG=${{ needs.collect-services-versions.outputs.stellar-dominion-service-tag }}" >> ./deployments/.env
          echo "ENV_STELLAR_DOMINION_DATABASE_PASSWORD=${{ secrets.STELLAR_DOMINION_DATABASE_MANAGER_PASSWORD }}" >> ./deployments/.env
          echo "USER_DASHBOARD_TAG=${{ needs.collect-services-versions.outputs.user-dashboard-tag }}" >> ./deployments/.env
          echo "USER_DASHBOARD_ORIGIN=${{ secrets.USER_DASHBOARD_ORIGIN }}" >> ./deployments/.env
          echo "STELLAR_DOMINION_TAG=${{ needs.collect-services-versions.outputs.stellar-dominion-tag }}" >> ./deployments/.env
          echo "STELLAR_DOMINION_ORIGIN=${{ secrets.STELLAR_DOMINION_ORIGIN }}" >> ./deployments/.env
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> ./deployments/.env
          echo "TRAEFIK_USER=${{ secrets.TRAEFIK_USER }}" >> ./deployments/.env
          echo "TRAEFIK_HASHED_PASSWORD='"'${{ secrets.TRAEFIK_HASHED_PASSWORD }}'"'" >> ./deployments/.env
      - name: Install SSH keys
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          known_hosts: ${{ secrets.EC2_DEPLOY_SSH_KNOWN_HOSTS }}
      - name: Sync deployment configuration
        # https://www.tecmint.com/rsync-local-remote-file-synchronization-commands/#3_Copy_a_Directory_from_Local_to_Remote_Server
        run: |
          rsync -avzh ./deployments ubuntu@${{ secrets.EC2_DEPLOY_HOST }}:/home/ubuntu//
  deploy:
    runs-on: ubuntu-latest
    needs: [determine-execution-status, sync-deployment-configuration]
    if: ${{ needs.determine-execution-status.outputs.should-execute }}
    steps:
      - name: Deploy latest services version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            docker compose -f ./deployments/compose.yaml up -d
  clean-deployment-config-backup:
    runs-on: ubuntu-latest
    needs: [determine-execution-status, deploy]
    if: ${{ needs.determine-execution-status.outputs.should-execute }}
    steps:
      - name: Clean back-up of deployment config
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            rm -rf ~/deployments.bak
